/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ChallengeParticipantIdPlayImport } from './routes/challenge.$participantId.play'
import { Route as ChallengeIdJoinImport } from './routes/challenge.$id.join'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ChallengeParticipantIdPlayRoute = ChallengeParticipantIdPlayImport.update(
  {
    id: '/challenge/$participantId/play',
    path: '/challenge/$participantId/play',
    getParentRoute: () => rootRoute,
  } as any,
)

const ChallengeIdJoinRoute = ChallengeIdJoinImport.update({
  id: '/challenge/$id/join',
  path: '/challenge/$id/join',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/challenge/$id/join': {
      id: '/challenge/$id/join'
      path: '/challenge/$id/join'
      fullPath: '/challenge/$id/join'
      preLoaderRoute: typeof ChallengeIdJoinImport
      parentRoute: typeof rootRoute
    }
    '/challenge/$participantId/play': {
      id: '/challenge/$participantId/play'
      path: '/challenge/$participantId/play'
      fullPath: '/challenge/$participantId/play'
      preLoaderRoute: typeof ChallengeParticipantIdPlayImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/challenge/$id/join': typeof ChallengeIdJoinRoute
  '/challenge/$participantId/play': typeof ChallengeParticipantIdPlayRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/challenge/$id/join': typeof ChallengeIdJoinRoute
  '/challenge/$participantId/play': typeof ChallengeParticipantIdPlayRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/challenge/$id/join': typeof ChallengeIdJoinRoute
  '/challenge/$participantId/play': typeof ChallengeParticipantIdPlayRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/challenge/$id/join' | '/challenge/$participantId/play'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/challenge/$id/join' | '/challenge/$participantId/play'
  id:
    | '__root__'
    | '/'
    | '/challenge/$id/join'
    | '/challenge/$participantId/play'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChallengeIdJoinRoute: typeof ChallengeIdJoinRoute
  ChallengeParticipantIdPlayRoute: typeof ChallengeParticipantIdPlayRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChallengeIdJoinRoute: ChallengeIdJoinRoute,
  ChallengeParticipantIdPlayRoute: ChallengeParticipantIdPlayRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/challenge/$id/join",
        "/challenge/$participantId/play"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/challenge/$id/join": {
      "filePath": "challenge.$id.join.tsx"
    },
    "/challenge/$participantId/play": {
      "filePath": "challenge.$participantId.play.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
